<?php
/**
 * @file
 * File containing the implemented hooks.
 */

/**
 * Implements hook_help().
 */
function social_stats_help($path, $arg) {
  $help_text = '';
  switch ($path) {
    case 'admin/help#social_stats':
      $help_text = '<p>' . t('This module provides an API to get the social statistics of the nodes of the selected content types. The data includes number of shares of a particular node on Facebook, Twitter, LinkedIn, Google Plus. This module does a collection of data on cron run. Using modules like Elysia Cron this can be set to some convinient time (for e.g. once or twice a day).') . '</p><p>' . t('Use Social Stats Views module for integration of this data in the Views module : like sorting according to the number of shares, using the number of shares as a field, having a filter criteria with this data, etc.') . '</p>';
      break;
  }
  return $help_text;
}

/**
 * Implements hook_menu().
 */
function social_stats_menu() {
  $items['admin/config/services/social-stats/settings'] = array(
    'title' => 'Social Statistics',
    'description' => 'Administrative settings for social stats module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_stats_content_types_form'),
    'access arguments' => array('Administer Social Stats'),
    'file' => 'social_stats.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function social_stats_permission() {
  return array(
    'Administer Social Stats' => array(
      'title' => t('Administer my module'),
      'description' => t('Perform administration tasks for my module.'),
    ),
  );
}

/**
 * Fetch the data from Facebook and save it to local table.
 *
 * @param array $node
 *   Contains $node->nid.
 * @param string $node_path
 *   The URL alias.
 */
function _social_stats_facebook($node, $node_path = '') {
  $fql_query  = 'SELECT share_count, like_count, comment_count, total_count ';
  $fql_query .= "FROM link_stat WHERE url='" . $node_path . "'";

  // TODO: Implement multi-query
  // https://developers.facebook.com/docs/technical-guides/fql/
  $fql_queries = array('query1' => $fql_query);
  $params = array(
    'q' => json_encode($fql_queries),
    'format' => 'json',
    // 'access_token' => $access_token
  );

  $request_url = 'https://graph.facebook.com/fql?' . http_build_query($params);

  $fql_response = drupal_http_request($request_url);

  if (!empty($fql_response->error)) {
    watchdog(t('Social Stats'),
      'Problem updating data from Facebook for %node_path. Error: %err',
      array('%node_path' => $node_path, '%err' => $fql_response->error),
      NULL, WATCHDOG_ERROR);
  }
  else {
    $fql_data = json_decode($fql_response->data);
    foreach ($fql_data->data as $fql_data_row) {
      $facebook_data = $fql_data_row->fql_result_set;
      // Only update table if counter > 0
      if (intval($facebook_data[0]->total_count)) {
        db_merge('social_stats_facebook')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'fb_likes' => intval($facebook_data[0]->like_count),
          'fb_shares' => intval($facebook_data[0]->share_count),
          'fb_comments' => intval($facebook_data[0]->comment_count),
          'fb_total' => intval($facebook_data[0]->total_count),
        ))
        ->execute();
        return $facebook_data[0]->total_count;
      }
      return 0;
    }
  }
}

/**
 * Fetch the data from Twitter and save it to local table.
 *
 * @param array $node
 *   Contains $node->nid.
 * @param string $node_path
 *   The URL alias.
 */
function _social_stats_twitter($node, $node_path = '') {
  $twitter_shares = 0;

  $tweets_query = 'http://urls.api.twitter.com/1/urls/count.json?url=';
  $tweets_query .= $node_path;
  $tweets_response = drupal_http_request($tweets_query);

  if (!empty($tweets_response->error)) {
    watchdog(t('Social Stats'),
      'Problem updating data from Twitter for %node_path. Error: %err',
      array('%node_path' => $node_path, '%err' => $tweets_response->error),
      NULL, WATCHDOG_ERROR);
  }
  else {
    $tweets_data = json_decode($tweets_response->data);

    // Only update table if counter > 0
    $twitter_shares = intval($tweets_data->count);
    if ($twitter_shares) {
      db_merge('social_stats_twitter')
      ->key(array('nid' => $node->nid))
      ->fields(array('tweets' => $twitter_shares))
      ->execute();
    }
  }
  return $twitter_shares;
}

/**
 * Fetch the data from LinkedIn and save it to local table.
 *
 * @param array $node
 *   Contains $node->nid.
 * @param string $node_path
 *   The URL alias.
 */
function _social_stats_linkedin($node, $node_path = '') {
  $linkedin_shares = 0;

  // Write a query to fetch the data from LinkedIn.
  $linkedin_query = 'http://www.linkedin.com/countserv/count/share?';
  $linkedin_query .= 'format=json&url=' . $node_path;
  $linkedin_response = drupal_http_request($linkedin_query);

  if (!empty($linkedin_response->error)) {
    watchdog(t('Social Stats'),
      'Problem updating data from LinkedIn for %node_path. Error: %err',
      array('%node_path' => $node_path, '%err' => $linkedin_response->error),
      NULL, WATCHDOG_ERROR);
  }
  else {
    $linkedin_data = json_decode($linkedin_response->data);

    // Only update table if counter > 0
    $linkedin_shares = intval($linkedin_data->count);
    if ($linkedin_shares) {
      db_merge('social_stats_linkedin')
      ->key(array('nid' => $node->nid))
      ->fields(array('linkedin_shares' => $linkedin_shares))
      ->execute();
    }
  }
  return $linkedin_shares;
}

/**
 * Fetch the data from Google+ and save it to local table.
 *
 * @param array $node
 *   Contains $node->nid.
 * @param string $node_path
 *   The URL alias.
 */
function _social_stats_googleplus($node, $node_path = '') {
  $gplus_count = 0;

  // Build the JSON data for the API request.
  $data['method'] = 'pos.plusones.get';
  $data['id'] = 'p';
  $data['params']['nolog'] = TRUE;
  $data['params']['id'] = $node_path;
  $data['params']['source'] = 'widget';
  $data['params']['userId'] = '@viewer';
  $data['params']['groupId'] = '@self';
  $data['jsonrpc'] = '2.0';
  $data['key'] = 'p';
  $data['apiVersion'] = 'v1';

  $url = 'https://clients6.google.com/rpc?key=AIzaSyCKSbrvQasunBoV16zDH9R33D88CeLr9gQ';
  $options['data'] = json_encode($data);
  $options['method'] = 'POST';
  $options['headers']['Content-Type'] = 'application/json';

  $request = drupal_http_request($url, $options);

  if (!empty($request->error) || empty($request->data)) {
    watchdog(t('Social Stats'),
      'Problem updating data from Google+ for %node_path. Error: %err',
      array('%node_path' => $node_path, '%err' => $request->error),
      NULL, WATCHDOG_ERROR);
  }
  else {
    $request->data = json_decode($request->data);
    if (isset($request->data->result->metadata->globalCounts->count)) {
      $gplus_count = intval($request->data->result->metadata->globalCounts->count);

      // Only update table if counter > 0
      if ($gplus_count) {
        db_merge('social_stats_gplus')
        ->key(array('nid' => $node->nid))
        ->fields(array('plusone' => $gplus_count))
        ->execute();
      }
    }
  }
  return $gplus_count;
}

/**
 * The queue worker function to update the data.
 */
function _social_stats_update($result) {
  $facebook_total = 0;
  $twitter_shares = 0;
  $linkedin_shares = 0;
  $google_plusone = 0;
  $variable = variable_get('social_stats_' . $result->type);

  // Create absolute node path using the node path.
  $node_path = url('node/' . $result->nid, array('absolute' => TRUE));

  // Getting data from Facebook for nodes of the selected node type.
  if ($variable['Facebook']) {
    $facebook_total = _social_stats_facebook($result, $node_path);
  }

  // Getting data from Twitter for nodes of selected node type.
  if ($variable['Twitter']) {
    $twitter_shares = _social_stats_twitter($result, $node_path);
  }

  // Getting data from LinkedIn for nodes of selected node type.
  if ($variable['LinkedIn']) {
    $linkedin_shares = _social_stats_linkedin($result, $node_path);
  }

  // Getting data from Google Plus for nodes of selected node type.
  if ($variable['Google Plus']) {
    $google_plusone = _social_stats_googleplus($result, $node_path);
  }

  $count_total = $facebook_total + $twitter_shares;
  $count_total += $linkedin_shares + $google_plusone;

  // Adding the total data from all above to get total virality.
  // Update table only when counter > 0
  if ($count_total) {
    db_merge('social_stats_total')
    ->key(array('nid' => $result->nid))
    ->fields(array('total_virality' => $count_total))
    ->execute();
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function social_stats_cron_queue_info() {
  $queues['social_stats_update_stats'] = array(
    'worker callback' => '_social_stats_update',
    'time' => variable_get('social_stats_cron_duration', 300),
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function social_stats_cron() {
  $interval = variable_get('social_stats_cron_interval', 60 * 60 * 24);
  if (time() >= variable_get('social_stats_next_execution', 0)) {
    variable_set('social_stats_next_execution', time() + $interval);

    // Get list of content types in the site.
    $node_types = node_type_get_types();
    $content_types = array();
    foreach ($node_types as $types) {
      $variable = variable_get('social_stats_' . $types->type);
      if ($variable['Facebook']    ||
          $variable['Twitter']     ||
          $variable['Google Plus'] ||
          $variable['LinkedIn']) {
        $content_types[] = $types->type;
      }
    }

    $start_date = strtotime(variable_get('social_stats_start_date', 'January 1st, 1970'));
    // Fetch node id and type for the content types,
    // which has at least one social media selected and
    // which are created after the date mentioned in module's configuration.
    $query = db_select('node', 'n')
              ->fields('n', array('nid', 'type'))
              ->condition('n.type', empty($content_types) ? '0' : $content_types)
              ->condition('n.created', $start_date, '>=')
              ->execute();
    $queue = DrupalQueue::get('social_stats_update_stats');
    while ($result = $query->fetchObject()) {
      $queue->createItem($result);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function social_stats_node_delete($node) {
  // Delete all the social data on node deletion.
  db_delete('social_stats_facebook')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('social_stats_twitter')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('social_stats_linkedin')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('social_stats_gplus')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('social_stats_total')
    ->condition('nid', $node->nid)
    ->execute();
}
